void subArraySumOfSizeK(int arr[], int n, int k) //sliding window approach for O(n)
{
    int sum = 0;
    for(int i=0;i<k;i++)
    {
        sum+= arr[i];
    }
    cout<<sum<<" ";
    int j = 0;
    int m = k;
    for(int i=1;i<(n-k+1);i++)
    {
        sum += arr[m++];
        sum -= arr[j++];
        cout<<sum<<" ";
    }
    cout<<endl;
}

void printPattern(int n)
{
    n = n*2;
    int num = n;
    int k = 0;
    
    while(n > 0)
    {
        for(int i=0;i<n/2;i++)
        {
            cout<<"*";
        }
        for(int j=0;j<k;j++)
        {
            cout<<" ";
        }
        for(int i=0;i<n/2;i++)
        {
            cout<<"*";
        }
        n-=2;
        k+=2;
        cout<<endl;
    }
    
    n = 2;
    k = num - n;
    while(n <= num)
    {
        for(int i=0;i<n/2;i++)
        {
            cout<<"*";
        }
        for(int j=0;j<k;j++)
        {
            cout<<" ";
        }
        for(int i=0;i<n/2;i++)
        {
            cout<<"*";
        }
        n+=2;
        k-=2;
        cout<<endl;
    }
}

vector<int> maximumPositivity(int arr[], int n)  // 5, 6, -1, 7, 8 // 3, 4, -2, 5, 3, -2, 8, 2,10, -1, 4
{
    map<int, pair<int, int>> Map;
    int count = 0;
    int start_index = -1;
    int end_index = -1;
    int max_count = INT_MIN;
    vector<int> vec;
    int pos_check = 0;
    for(int i=0;i<n;i++)
    {
        if(arr[i] > 0)
        {
            if(pos_check == 0)
                start_index = i;
            cout<<"start_index: "<<start_index<<" ";
            count++;
            pos_check++;
        }
        else{
            pos_check = 0;
            max_count = max(max_count, count);
            end_index = i-1;
            cout<<"end_index: "<<end_index<<" "<<endl;
            Map.insert({count, make_pair(start_index, end_index)});
            count = 0;
        }
    }
    if(end_index < start_index)
    {
        max_count = max(max_count, count);
        end_index = n-1;
        cout<<"end_index: "<<end_index<<" "<<endl;
        Map.insert({count, make_pair(start_index, end_index)});
    }
    else if(end_index == -1)
    {
        max_count = max(max_count, count);
        end_index = n-1;
        cout<<"end_index: "<<end_index<<" "<<endl;
        Map.insert({count, make_pair(start_index, end_index)});
    }
    cout<<"max_count is: "<<max_count<<endl;
    pair<int,int> p = Map[max_count];
    //cout<<p.first<<" "<<p.second<<endl;
    for(int i=p.first; i<=p.second; i++)
    {
        vec.push_back(arr[i]);
    }
    return vec;
}

int maxSubArraySum(int arr[], int n)
{
    int sum = 0;
    int maxSum = INT_MIN;
    for(int i=0;i<n;i++)
    {
        sum += arr[i];
        if(maxSum < sum)
        {
            maxSum = sum;
        }
        if(sum < 0)
        {
            sum = 0;
        }
    }
    return maxSum;
}

void BeggersOutsideTemple(vector<int> vec, vector<vector<int>> q)
{
    int N = vec.size();
    
    for(int i=0;i<q.size();i++)
    {
        vec[q[i][0]] += q[i][2];
        if(q[i][1] + 1 < vec.size())
            vec[q[i][1] + 1] -= q[i][2]; 
    }
    
    int sum = vec[0];
    for(int i=1;i<vec.size();i++)
    {
        vec[i] = vec[i] + sum;
        sum = vec[i];
    }
    
    for(int i=1;i<vec.size();i++)
    {
        cout<<vec[i]<<" "; 
    }
    cout<<endl;
}

int rainWaterTrapping(vector<int> arr) // 4 2 5 7 4 2 3 6 8 2 3
{
    int N = arr.size();
    int count = 0;
    vector<int> leftMaxArray(N);
    vector<int> rightMaxArray(N);

    for(int i=0;i<N;i++)
    {
        if(i == 0)
        {
            leftMaxArray[0] = 0;
        }
        else{
            leftMaxArray[i] = max(leftMaxArray[i-1], arr[i-1]);
        }
    }
    
    for(int i=N-1;i>=0;i--)
    {
        if(i == N-1)
        {
            rightMaxArray[N-1] = 0;
        }
        else{
            rightMaxArray[i] = max(rightMaxArray[i+1], arr[i+1]);
        }
    }
    
    for(int i=0;i<N;i++)
    {
        cout<<leftMaxArray[i]<<" ";
    }
    cout<<endl;
    for(int i=0;i<N;i++)
    {
        cout<<rightMaxArray[i]<<" ";
    }
    
    for(int i=0;i<N;i++)
    {
        int value = min(leftMaxArray[i], rightMaxArray[i]) - arr[i];
        if(value > 0)
        {
            count += value;
        }
    }
    return count;
    
}

int main()
{
    int arr1[] = {5, 6, 7, -3, 2, -10, -12, 8, 12, 21, -4, 7};
   
    cout<<"max subarray sum is: "<<maxSubArraySum(arr1, n)<<endl;;
    cout<<endl;
    
    vector<vector<int>> quiries = {{2, 5, 2}, {1,3,1}, {0,2,3}, {3,5,4}};
    int N = 6;
    vector<int> vec(6);
    
    BeggersOutsideTemple(vec, quiries);
    
    vector<int> heights = {4, 2, 5, 7, 4, 2, 3, 6, 8, 2, 3};
    cout<<"total water trapped: "<<rainWaterTrapping(heights)<<endl;
    return 0;
}
