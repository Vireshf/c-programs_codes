/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>

using namespace std;

void pfSumOfMatrix(vector<vector<int>> vec)
{
    //row wise pfsum
    vector<vector<int>> pfsum(vec.size(), vector<int>(vec[0].size(), 0));
    cout<<"hello world"<<endl;
    for(int i=0;i<vec.size();i++)
    {
        for(int j=0;j<vec[0].size();j++)
        {
            if(j == 0)
            {
                pfsum[i][j] = vec[i][j];
                // cout<<pfsum[i][j]<<" ";
            }
            else
            {
                pfsum[i][j] = pfsum[i][j-1] + vec[i][j];
                //cout<<pfsum[i][j]<<" ";
            }
        }
        //cout<<endl;
    }
    
    //col wise pfsum
    
    for(int j=0;j<vec[0].size();j++)
    {
        for(int i=0;i<vec.size();i++)
        {
            if(i != 0)
            {
                pfsum[i][j] += pfsum[i-1][j];
            }
        }
    }
    
    for(int i=0;i<vec.size();i++)
    {
        for(int j=0;j<vec[0].size();j++)
        {
            cout<<pfsum[i][j]<<" ";
        }
        cout<<endl;
    }
}

bool searchInMatrixSortedColAndRow(vector<vector<int>> vec, int k)
{
    int i=0, j=vec[0].size()-1;
    
    while(i<vec.size() && j>=0)
    {
        cout<<vec[i][j]<<" ";
        if(vec[i][j] == k)
        {
            return true;
        }
        else if(vec[i][j] < k)
        {
            i++;
        }
        else
        {
            j--;
        }
    }
    return false;
}

// vector<vector<int>> vec2 = {{-20,-16,4,8},
//                               {-10,-8, 12,14},
//                               {-1, 6, 21, 30},
//                               {5, 7, 28, 42}};
                               
int maxSubMatrixSum(vector<vector<int>> vec)
{
    vector<vector<int>> pfsum(vec.size(), vector<int>(vec[0].size(), 0));
    for(int i=pfsum.size()-1;i>=0;i--)
    {
        for(int j=pfsum[0].size()-1;j>=0;j--)
        {
            if(j == pfsum[0].size()-1)
            {
                pfsum[i][j] = vec[i][j];
                if(pfsum[i][j] > maxSum)
                {
                    maxSum = pfsum[i][j];
                }
            }
            else
            {
                pfsum[i][j] = pfsum[i][j+1] + vec[i][j];
                if(pfsum[i][j] > maxSum)
                {
                    maxSum = pfsum[i][j];
                }
            }
        }
        //cout<<endl;
    }
    
    int maxSum = INT_MIN;
    for(int j=pfsum[0].size()-1;j>=0;j--)
    {
        for(int i=pfsum.size()-1;i>=0;i--)
        {
            if(i != pfsum.size()-1)
            {
                pfsum[i][j] += pfsum[i+1][j];
                if(pfsum[i][j] > maxSum)
                {
                    maxSum = pfsum[i][j];
                }
            }
        }
    }
    return maxSum;
}

int sumOfAllSubMatrixSum(vector<vector<int>> vec)
{
    //constribution technique.
    int sum = 0;
    for(int i=0;i<vec.size();i++)
    {
        for(int j=0;j<vec[0].size();j++)
        {
            sum = sum + (vec[i][j] * (i+1) * (j+1) * (vec.size()-i) * (vec[0].size()-i));
        }
    }
    return sum;
}

int main()
{
    //cout<<"Hello World";
    vector<vector<int>> vec = {{1,2,3,4,5},
                               {1,2,0,1,2},
                               {4,5,2,1,0},
                               {6,3,2,4,1},
                               {2,3,4,1,5}};
    
    pfSumOfMatrix(vec);
    
    //vector<vector<int>> pfsum(vec.size(), vector<int>(vec[0].size(), 0));
    //cout<<pfsum[0].size()<<endl;
    // try
    // {
    //     //int *ptr = nullptr;
    //     //cout<<*ptr<<endl;
    //     //int a = 2/0;
    //     int arr[5] = {0};
    //     cout<<arr[5]<<endl;
    // }
    // catch(...)
    // {
    //     cout<<"here: "<<endl;
    // }
    vector<vector<int>> vec1 = {{5,10,15,20},
                               {6,12,18,24},
                               {7,14,21,28},
                               {8,16,24,34}};
    
    //cout<<"element present: "<<searchInMatrix(vec1, 11);
    
    vector<vector<int>> vec2 = {{-20,-16,4,8},
                               {-10,-8, 12,14},
                               {-1, 6, 21, 30},
                               {5, 7, 28, 42}};
                               
    cout<<"max submatrix sum in sorted rowwise and colwise is: "<<maxSubMatrixSum(vec2);
    
    vector<vector<int>> vec3 = {{1,2},
                               {4,5}};
    cout<<"sum all matrices: "<<sumOfAllSubMatrixSum(vec3);
    return 0;
}
