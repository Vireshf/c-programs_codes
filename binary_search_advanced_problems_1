/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;

int ans = -1;
int binarySerach(int arr[], int N, int target)
{
    int low = 0;
    int high = N-1;
    
    while(low <= high)
    {
        int mid = (low + high)/2;
        
        if(arr[mid] == target)
        {
            return arr[mid];
        }
        else if(arr[mid] < target)
        {
            ans = arr[mid];
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
        cout<<"ans: "<<ans<<endl;
    }
    return ans;
}

int ans1 = -1;
int frequencyOfKLeft(int arr[], int N, int K)
{
    int low = 0, high = N-1;

    while(low <= high)
    {
        int mid = (low + high)/2;
        cout<<low<<" "<<mid<<" "<<high<<endl;
        if(arr[mid] == K)
        {
            ans1 = mid;
            high = mid - 1;
        }
        else if(arr[mid] < K)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
        cout<<"here: " <<low<<" "<<mid<<" "<<high<<endl;
    }
    return ans1;
}

int ans2 = -1;
int frequencyOfKRight(int arr[], int N, int K)
{
    int low = 0, high = N-1;

    while(low <= high)
    {
        int mid = (low + high)/2;
        cout<<low<<" "<<mid<<" "<<high<<endl;
        if(arr[mid] == K)
        {
            ans2 = mid;
            low = mid + 1;
        }
        else if(arr[mid] < K)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
        cout<<"here: " <<low<<" "<<mid<<" "<<high<<endl;
    }
    return ans2;
}

int main()
{
    //cout<<"Hello World";
    // int arr[] = {-5, 2, 3, 6, 9, 10, 11, 14, 18};
    // int N = sizeof(arr)/sizeof(arr[0]);
    // int target = -7;
    
    // int arr1[] = {-5,-5,-3,0,5,5,5,5,5,5,5,5,5,8,10,10,15,15};
    // int N = sizeof(arr1)/sizeof(arr1[0]);
    // cout<<"size is: "<<N<<endl;
    // int K = 5;
    // cout<<frequencyOfKRight(arr1, N, K) - frequencyOfKLeft(arr1, N, K) + 1;
    //cout<<binarySerach(arr, N, target);
  
    return 0;
}
