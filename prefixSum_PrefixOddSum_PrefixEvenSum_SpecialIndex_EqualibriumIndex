/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <bits/stdc++.h>

using namespace std;

int EqulibriumIndexes(int arr[], int n)
{
    int pfsum[n] = {0};
    
    pfsum[0] = arr[0];
    
    for(int i=1;i<n;i++)
    {
        pfsum[i] = pfsum[i-1] + arr[i];
    }
    
    int count = 0;
    for(int i=0;i<n;i++)
    {
        int left;
        int right;
        
        if(i == 0)
        {
            left = 0;
        }
        else
        {
            left = pfsum[i-1];
        }
        
        right = pfsum[n-1] - pfsum[i];
        if(left == right)
        {
            count++;   
        }
    }
    return count;
}

int specialIndex(int arr[], int n)
{
    int pfEvenSum[n] = {0};
    int pfOddSum[n] = {0};
    pfEvenSum[0] = arr[0];
    pfOddSum[0] = 0;
    
    for(int i=1;i<n;i++)
    {
        if(i % 2 == 1)
            pfEvenSum[i] = pfEvenSum[i-1];
        else
            pfEvenSum[i] = pfEvenSum[i-1] + arr[i];
    }
    
    for(int i=1;i<n;i++)
    {
        if(i % 2 == 0)
            pfOddSum[i] = pfOddSum[i-1];
        else
            pfOddSum[i] = pfOddSum[i-1] + arr[i];
    }

    int totalEvenSum = pfOddSum[n-1] - pfOddSum[0];
    int totalOddSum = pfEvenSum[n-1] - pfEvenSum[0];
    
    if(totalOddSum == totalEvenSum)
        return 0;
    
    for(int i=1;i<n;i++)
    {
        totalEvenSum = pfEvenSum[i-1] + pfOddSum[n-1] - pfOddSum[i];
        totalOddSum = pfOddSum[i-1] + pfEvenSum[n-1] - pfEvenSum[i];
        if(totalOddSum == totalEvenSum)
            return i;
    }    
    return -1;
}


int main()
{
    int arr[] = {1, 2, 3, 4, 1, 2, 3};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    int pfsum[n] = {0};
    pfsum[0] = arr[0];
    for(int i=1;i<n;i++)
    {
        pfsum[i] = pfsum[i-1] + arr[i];
    }
    
    for(int i=0;i<n;i++)
    {
        cout<<pfsum[i]<<" ";
    }
    
    int pfEvenSum[n] = {0};
    pfEvenSum[0] = arr[0];
    
    for(int i=1;i<n;i++)
    {
        if(i%2 == 1)
            pfEvenSum[i] = pfEvenSum[i-1] ;
        else
            pfEvenSum[i] = pfEvenSum[i-1] + arr[i];
    }
    
    for(int i=0;i<n;i++)
    {
        cout<<pfEvenSum[i]<<" ";
    }
    
    int pfOddSum[n] = {0};
    pfOddSum[0] = 0;
    for(int i=1;i<n;i++)
    {
        if(i%2 == 0)
            pfOddSum[i] = pfOddSum[i-1] ;
        else
            pfOddSum[i] = pfOddSum[i-1] + arr[i];
    }
    
    for(int i=0;i<n;i++)
    {
        cout<<pfOddSum[i]<<" ";
    }
    
    cout<<"sum between index 1 and 4 of arr is: "<<pfsum[4] - pfsum[0]<<endl;
    cout<<"sum of first 4 numbers is: "<<pfsum[3]<<endl;
    
    cout<<"no of equalibrium indexes: "<<EqulibriumIndexes(arr, n)<<endl;
    
    cout<<"special index: "<<specialIndex(arr, n);
    return 0;
}
